name: CI

on:
  push:
    branches: 
      - main
      - feature/gcp-kubernetes-deployment  # Run CI on feature branch for pre-merge validation
  pull_request:
    branches: 
      - main
      - feature/gcp-kubernetes-deployment  # Run CI on PRs to feature branch
  schedule:
    # Run stress job weekly at 03:00 UTC on Sundays (example)
    - cron: '0 3 * * 0'
  workflow_dispatch: {}

jobs:
  lint:
    name: Lint & Format Check
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          cache: 'pip'
          cache-dependency-path: 'requirements*.txt'

      - name: Cache pip downloads
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements*.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install dependencies
        env:
          PIP_CACHE_DIR: ~/.cache/pip
        run: |
          python -m pip install --upgrade pip
          pip install --cache-dir "$PIP_CACHE_DIR" -r requirements.txt
          pip install --cache-dir "$PIP_CACHE_DIR" -r requirements-dev.txt

      - name: Run ruff
        run: python -m ruff check .

      - name: Check code formatting with black
        run: python -m black --check src/ tests/ web/

      - name: Check import sorting with isort
        run: python -m isort --check-only --profile black src/ tests/ web/

  security:
    name: Security Scan (weekly/manual only)
    runs-on: ubuntu-latest
    needs: [lint]
    if: github.event_name == 'schedule' || github.event_name == 'workflow_dispatch'
    
    steps:
      - uses: actions/checkout@v4


      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          cache: 'pip'
          cache-dependency-path: 'requirements*.txt'

      - name: Cache pip downloads
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements*.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install dependencies
        env:
          PIP_CACHE_DIR: ~/.cache/pip
        run: |
          python -m pip install --upgrade pip
          pip install --cache-dir "$PIP_CACHE_DIR" -r requirements.txt
          pip install --cache-dir "$PIP_CACHE_DIR" -r requirements-dev.txt

      - name: Run bandit security scan
        run: |
          python -m bandit -r src/ -ll -f txt || true
          echo "Bandit found issues but not failing build (review recommended)"

      - name: Check dependency vulnerabilities with safety
        run: |
          python -m safety check --json || true
          echo "Safety check completed (review recommended)"
        continue-on-error: true

  unit:
    name: Unit Tests (fast)
    runs-on: ubuntu-latest
    needs: [lint]

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          cache: 'pip'
          cache-dependency-path: 'requirements*.txt'

      - name: Cache pip downloads
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements*.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install dependencies
        env:
          PIP_CACHE_DIR: ~/.cache/pip
        run: |
          python -m pip install --upgrade pip
          pip install --cache-dir "$PIP_CACHE_DIR" -r requirements.txt
          pip install --cache-dir "$PIP_CACHE_DIR" -r requirements-dev.txt

      - name: Create data directory for tests
        run: mkdir -p data

      - name: Run unit tests (no coverage gating)
        env:
          # Use in-memory telemetry DB for deterministic unit tests
          TELEMETRY_DATABASE_URL: "sqlite:///:memory:"
        run: |
          # Run fast tests only; exclude integration/e2e/slow markers
          pytest -q -k "not integration and not e2e and not slow"

  origin-proxy-only:
    name: Origin-proxy tests (smoke)
    runs-on: ubuntu-latest
    needs: [unit]
    # Only run smoke tests on main branch or PRs to main
    if: github.event_name == 'push' || github.base_ref == 'main' || github.ref == 'refs/heads/main'

    steps:
      - uses: actions/checkout@v4


      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          cache: 'pip'
          cache-dependency-path: 'requirements*.txt'

      - name: Cache pip downloads
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements*.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install dependencies
        env:
          PIP_CACHE_DIR: ~/.cache/pip
        run: |
          python -m pip install --upgrade pip
          pip install --cache-dir "$PIP_CACHE_DIR" -r requirements.txt
          pip install --cache-dir "$PIP_CACHE_DIR" -r requirements-dev.txt

      - name: Create data directory for tests
        run: mkdir -p data

      - name: Run origin-proxy tests only
        env:
          TELEMETRY_DATABASE_URL: "sqlite:///:memory:"
          PYTEST_ADDOPTS: "-q --maxfail=1"
        run: |
          # Avoid repo-level coverage gating for the smoke run by overriding
          # addopts. The integration job still enforces coverage for the full run.
          pytest --override-ini addopts="" $PYTEST_ADDOPTS tests/test_origin_proxy.py tests/test_integration_proxy.py

  postgres-integration:
    name: PostgreSQL Integration Tests
    runs-on: ubuntu-latest
    needs: [unit]
    # Only run full integration tests on main branch or PRs to main
    if: github.event_name == 'push' || github.base_ref == 'main' || github.ref == 'refs/heads/main'

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: mizzou_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          cache: 'pip'
          cache-dependency-path: 'requirements*.txt'

      - name: Cache pip downloads
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements*.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install dependencies
        env:
          PIP_CACHE_DIR: ~/.cache/pip
        run: |
          python -m pip install --upgrade pip
          pip install --cache-dir "$PIP_CACHE_DIR" -r requirements.txt
          pip install --cache-dir "$PIP_CACHE_DIR" -r requirements-dev.txt

      - name: Create data directory for tests
        run: mkdir -p data

      - name: Run Alembic migrations on test database
        env:
          DATABASE_URL: "postgresql://postgres:postgres@localhost:5432/mizzou_test"
          DATABASE_ENGINE: "postgresql"
          DATABASE_HOST: "localhost"
          DATABASE_PORT: "5432"
          DATABASE_NAME: "mizzou_test"
          DATABASE_USER: "postgres"
          DATABASE_PASSWORD: "postgres"
        run: |
          alembic upgrade head

      - name: Run integration tests with PostgreSQL
        env:
          DATABASE_URL: "postgresql://postgres:postgres@localhost:5432/mizzou_test"
          TELEMETRY_DATABASE_URL: "postgresql://postgres:postgres@localhost:5432/mizzou_test"
          TEST_DATABASE_URL: "postgresql://postgres:postgres@localhost:5432/mizzou_test"
          DATABASE_ENGINE: "postgresql"
          DATABASE_HOST: "localhost"
          DATABASE_PORT: "5432"
          DATABASE_NAME: "mizzou_test"
          DATABASE_USER: "postgres"
          DATABASE_PASSWORD: "postgres"
        run: |
          # Run telemetry integration tests against PostgreSQL
          pytest -v -m "postgres" tests/test_telemetry_store_postgres.py tests/utils/test_byline_telemetry.py tests/utils/test_content_cleaning_telemetry.py || echo "Some PostgreSQL tests may not have postgres marker yet"

  integration:
    name: Integration & Coverage
    runs-on: ubuntu-latest
    needs: [unit]
    # Only run full integration tests on main branch or PRs to main
    if: github.event_name == 'push' || github.base_ref == 'main' || github.ref == 'refs/heads/main'

    steps:
      - uses: actions/checkout@v4


      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          cache: 'pip'
          cache-dependency-path: 'requirements*.txt'

      - name: Cache pip downloads
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements*.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install dependencies
        env:
          PIP_CACHE_DIR: ~/.cache/pip
        run: |
          python -m pip install --upgrade pip
          pip install --cache-dir "$PIP_CACHE_DIR" -r requirements.txt
          pip install --cache-dir "$PIP_CACHE_DIR" -r requirements-dev.txt

      - name: Create data directory for tests
        run: mkdir -p data

      - name: Run full tests with coverage
        run: pytest --cov=src --cov-report=xml --cov-report=html --cov-report=term-missing --cov-fail-under=80

      - name: Generate coverage summary
        if: success()
        run: python tools/generate_coverage_summary.py coverage.xml coverage-summary.md

      - name: Upload coverage artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: coverage-py311
          path: |
            coverage.xml
            coverage-summary.md
            htmlcov/
          if-no-files-found: warn

  stress:
    name: Stress Concurrency Tests (scheduled/manual only)
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule' || github.event_name == 'workflow_dispatch'
    steps:
      - uses: actions/checkout@v4


      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          cache: 'pip'
          cache-dependency-path: 'requirements*.txt'

      - name: Cache pip downloads
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements*.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install dependencies (includes extras for stress)
        env:
          PIP_CACHE_DIR: ~/.cache/pip
        run: |
          python -m pip install --upgrade pip
          pip install --cache-dir "$PIP_CACHE_DIR" -r requirements.txt

      - name: Run stress tests with RUN_STRESS_TESTS=1
        env:
          RUN_STRESS_TESTS: '1'
        run: |
          pytest --override-ini addopts="-q" tests/test_versioning_concurrent_stress.py
