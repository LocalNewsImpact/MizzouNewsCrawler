name: Pre-Deployment Validation

on:
  pull_request:
    branches:
      - main  # Only validate PRs to main
  push:
    branches:
      - main  # Only validate pushes to main
  workflow_dispatch:

jobs:
  validation:
    name: Pre-Deployment Validation
    runs-on: ubuntu-latest
    timeout-minutes: 15
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'
          cache-dependency-path: 'requirements*.txt'
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install -r requirements-dev.txt
          pip install pyyaml
      
      - name: Run origin proxy unit tests
        run: |
          echo "=========================================="
          echo "Running Origin Proxy Unit Tests"
          echo "=========================================="
          pytest tests/test_origin_proxy.py -v --tb=short --override-ini="addopts="
      
      - name: Run sitecustomize integration tests
        run: |
          echo "=========================================="
          echo "Running Sitecustomize Integration Tests"
          echo "=========================================="
          pytest tests/test_sitecustomize_integration.py -v --tb=short --override-ini="addopts="
      
      - name: Validate deployment configurations
        run: |
          echo "=========================================="
          echo "Validating Deployment YAML Files"
          echo "=========================================="
          
          # Check processor deployment
          echo "Checking processor-deployment.yaml..."
          
          # Verify PYTHONPATH includes /app
          if ! grep -q 'value: "/app:' k8s/processor-deployment.yaml; then
            echo "❌ PYTHONPATH does not include /app!"
            echo "   This will cause ModuleNotFoundError for src imports"
            grep -A1 "name: PYTHONPATH" k8s/processor-deployment.yaml || echo "   Not found!"
            exit 1
          fi
          echo "✓ PYTHONPATH includes /app"
          
          # Verify image is placeholder (not :latest)
          if grep -q 'image:.*:latest' k8s/processor-deployment.yaml; then
            echo "❌ Deployment uses image:latest!"
            echo "   This prevents Cloud Deploy from updating pods"
            exit 1
          fi
          echo "✓ Image is placeholder (not :latest)"
          
          # Check CPU limits are reasonable
          cpu_request=$(grep -A1 "requests:" k8s/processor-deployment.yaml | grep "cpu:" | awk '{print $2}' | tr -d '"')
          cpu_limit=$(grep -A1 "limits:" k8s/processor-deployment.yaml | grep "cpu:" | awk '{print $2}' | tr -d '"')
          echo "✓ CPU request: ${cpu_request}"
          echo "✓ CPU limit: ${cpu_limit}"
          
          echo ""
          echo "✅ Deployment YAML validation passed"
      
      - name: Validate Skaffold configuration
        run: |
          echo "=========================================="
          echo "Validating Skaffold Configuration"
          echo "=========================================="
          
          if [ ! -f "skaffold.yaml" ]; then
            echo "⚠️  No skaffold.yaml found"
            exit 0
          fi
          
          # Check processor artifact
          if ! grep -q 'image: processor' skaffold.yaml; then
            echo "❌ Skaffold config missing processor artifact!"
            exit 1
          fi
          echo "✓ Processor artifact defined"
          
          # Check manifests
          if ! grep -q 'rawYaml:' skaffold.yaml; then
            echo "❌ Skaffold config missing manifest paths!"
            exit 1
          fi
          echo "✓ Manifest paths defined"
          
          echo ""
          echo "✅ Skaffold configuration valid"
      
      - name: Validate Cloud Build configuration
        run: |
          echo "=========================================="
          echo "Validating Cloud Build Configuration"
          echo "=========================================="
          
          # Check processor Cloud Build config
          if [ ! -f "cloudbuild-processor.yaml" ]; then
            echo "❌ cloudbuild-processor.yaml not found!"
            exit 1
          fi
          echo "✓ cloudbuild-processor.yaml exists"
          
          # Verify Skaffold rendering is enabled
          if ! grep -q '\-\-skaffold\-file' cloudbuild-processor.yaml; then
            echo "❌ Cloud Build doesn't use Skaffold rendering!"
            echo "   Add --skaffold-file=skaffold.yaml to release creation"
            exit 1
          fi
          echo "✓ Skaffold rendering enabled"
          
          echo ""
          echo "✅ Cloud Build configuration valid"
      
      - name: Run full test suite with coverage
        env:
          DATABASE_URL: "sqlite:///:memory:"
          TELEMETRY_DATABASE_URL: "sqlite:///:memory:"
        run: |
          echo "=========================================="
          echo "Running Full Test Suite with Coverage"
          echo "=========================================="
          pytest tests/ -v --tb=short \
            --ignore=tests/test_integration_proxy.py \
            --ignore=tests/e2e/ \
            --cov=src \
            --cov-report=term \
            --cov-report=html \
            --cov-report=xml \
            -x
      
      - name: Upload coverage reports
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: |
            htmlcov/
            coverage.xml
      
      - name: Summary
        if: success()
        run: |
          echo ""
          echo "=========================================="
          echo "✅ ALL PRE-DEPLOYMENT VALIDATIONS PASSED"
          echo "=========================================="
          echo ""
          echo "This code is safe to deploy!"
