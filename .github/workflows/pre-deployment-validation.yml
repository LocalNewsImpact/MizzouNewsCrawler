name: Config Validation (Fast-Fail)

on:
  pull_request:
    branches:
      - main  # Only validate PRs to main
  push:
    branches:
      - main  # Only validate pushes to main
  workflow_dispatch:

jobs:
  validation:
    name: Config & Syntax Validation
    runs-on: ubuntu-latest
    timeout-minutes: 5  # Should be very fast
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Validate YAML syntax
        run: |
          echo "=========================================="
          echo "Validating YAML Syntax"
          echo "=========================================="
          
          # Install yamllint for fast YAML validation
          pip install yamllint
          
          # Check all YAML files for syntax errors
          yamllint -d "{extends: default, rules: {line-length: disable, document-start: disable}}" \
            .github/workflows/*.yml \
            gcp/*.yaml \
            gcp/cloudbuild/*.yaml \
            k8s/*.yaml \
            skaffold.yaml || exit 1
          
          echo "✅ All YAML files have valid syntax"
      
      - name: Set up Python
        run: |
          echo "=========================================="
          echo "Validating Python Syntax"
          echo "=========================================="
          
          # Quick syntax check on all Python files
          python -m py_compile src/**/*.py tests/**/*.py || exit 1
          
          echo "✅ All Python files have valid syntax"
      
          echo "✅ All Python files have valid syntax"
      
      - name: Validate Dockerfiles
        run: |
          echo "=========================================="
          echo "Validating Dockerfiles"
          echo "=========================================="
          
          # Check all Dockerfiles exist and have FROM statements
          for dockerfile in Dockerfile.base Dockerfile.ml-base Dockerfile.api Dockerfile.crawler Dockerfile.processor Dockerfile.migrator; do
            if [ ! -f "$dockerfile" ]; then
              echo "❌ $dockerfile not found!"
              exit 1
            fi
            if ! grep -q "^FROM" "$dockerfile"; then
              echo "❌ $dockerfile missing FROM statement!"
              exit 1
            fi
            echo "✓ $dockerfile exists and valid"
          done
          
          echo "✅ All Dockerfiles valid"
      
      - name: Validate deployment configurations
        run: |
          echo "=========================================="
          echo "Validating Deployment YAML Files"
          echo "=========================================="
          
          # Check processor deployment
          echo "Checking processor-deployment.yaml..."
          
          # Verify PYTHONPATH includes /app
          if ! grep -q 'value: "/app:' k8s/processor-deployment.yaml; then
            echo "❌ PYTHONPATH does not include /app!"
            echo "   This will cause ModuleNotFoundError for src imports"
            grep -A1 "name: PYTHONPATH" k8s/processor-deployment.yaml || echo "   Not found!"
            exit 1
          fi
          echo "✓ PYTHONPATH includes /app"
          
          # Verify image is placeholder (not :latest)
          if grep -q 'image:.*:latest' k8s/processor-deployment.yaml; then
            echo "❌ Deployment uses image:latest!"
            echo "   This prevents Cloud Deploy from updating pods"
            exit 1
          fi
          echo "✓ Image is placeholder (not :latest)"
          
          # Check CPU limits are reasonable
          cpu_request=$(grep -A1 "requests:" k8s/processor-deployment.yaml | grep "cpu:" | awk '{print $2}' | tr -d '"')
          cpu_limit=$(grep -A1 "limits:" k8s/processor-deployment.yaml | grep "cpu:" | awk '{print $2}' | tr -d '"')
          echo "✓ CPU request: ${cpu_request}"
          echo "✓ CPU limit: ${cpu_limit}"
          
          echo ""
          echo "✅ Deployment YAML validation passed"
      
      - name: Validate Skaffold configuration
        run: |
          echo "=========================================="
          echo "Validating Skaffold Configuration"
          echo "=========================================="
          
          if [ ! -f "skaffold.yaml" ]; then
            echo "⚠️  No skaffold.yaml found"
            exit 0
          fi
          
          # Check processor artifact
          if ! grep -q 'image: processor' skaffold.yaml; then
            echo "❌ Skaffold config missing processor artifact!"
            exit 1
          fi
          echo "✓ Processor artifact defined"
          
          # Check manifests
          if ! grep -q 'rawYaml:' skaffold.yaml; then
            echo "❌ Skaffold config missing manifest paths!"
            exit 1
          fi
          echo "✓ Manifest paths defined"
          
          echo ""
          echo "✅ Skaffold configuration valid"
      
      - name: Validate Cloud Build configuration
        run: |
          echo "=========================================="
          echo "Validating Cloud Build Configuration"
          echo "=========================================="
          
          # Check processor Cloud Build config
          if [ ! -f "gcp/cloudbuild/cloudbuild-processor.yaml" ]; then
            echo "❌ gcp/cloudbuild/cloudbuild-processor.yaml not found!"
            exit 1
          fi
          echo "✓ gcp/cloudbuild/cloudbuild-processor.yaml exists"
          
          # Verify Skaffold rendering is enabled
          if ! grep -q '\-\-skaffold\-file' gcp/cloudbuild/cloudbuild-processor.yaml; then
            echo "❌ Cloud Build doesn't use Skaffold rendering!"
            echo "   Add --skaffold-file=skaffold.yaml to release creation"
            exit 1
          fi
          echo "✓ Skaffold rendering enabled"
          
          echo ""
          echo "✅ Cloud Build configuration valid"
      
      - name: Validate requirements files
        run: |
          echo "=========================================="
          echo "Validating Requirements Files"
          echo "=========================================="
          
          # Check all requirements files exist and are not empty
          for req_file in requirements.txt requirements-base.txt requirements-api.txt requirements-crawler.txt requirements-processor.txt requirements-ml.txt requirements-migrator.txt requirements-dev.txt; do
            if [ ! -f "$req_file" ]; then
              echo "❌ $req_file not found!"
              exit 1
            fi
            if [ ! -s "$req_file" ]; then
              echo "❌ $req_file is empty!"
              exit 1
            fi
            echo "✓ $req_file exists and not empty"
          done
          
          echo "✅ All requirements files valid"
      
      - name: Validate Alembic migrations
        run: |
          echo "=========================================="
          echo "Validating Alembic Configuration"
          echo "=========================================="
          
          # Check alembic.ini exists
          if [ ! -f "alembic.ini" ]; then
            echo "❌ alembic.ini not found!"
            exit 1
          fi
          echo "✓ alembic.ini exists"
          
          # Check alembic directory structure
          if [ ! -d "alembic/versions" ]; then
            echo "❌ alembic/versions directory not found!"
            exit 1
          fi
          echo "✓ alembic/versions directory exists"
          
          # Check for migration files
          migration_count=$(find alembic/versions -name "*.py" -type f | wc -l)
          if [ "$migration_count" -eq 0 ]; then
            echo "❌ No migration files found in alembic/versions!"
            exit 1
          fi
          echo "✓ Found $migration_count migration file(s)"
          
          echo "✅ Alembic configuration valid"
      
      - name: Summary
        if: success()
        run: |
          echo ""
          echo "=========================================="
          echo "✅ ALL CONFIG VALIDATIONS PASSED"
          echo "=========================================="
          echo ""
          echo "Ready for full test suite!"
