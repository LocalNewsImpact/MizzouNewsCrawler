name: Quick Test

# Fast CI for iterating on failing tests during development
# 
# USE CASES:
# - Re-run only failing tests without waiting 20 min for full CI
# - Test a specific module you're working on
# - Validate a fix before pushing to full CI
#
# USAGE:
# 1. Go to Actions tab -> Quick Test -> Run workflow
# 2. Enter test path/pattern or use pytest -k filter
# 3. Get results in 2-5 minutes instead of 20
#
# EXAMPLES:
# - Test path: tests/services/test_classification_service_unit.py
# - Test path: tests/test_*.py (multiple files)
# - Pytest args: -k "test_batch" -v (filter by name)
# - Pytest args: -m postgres --maxfail=1 (run postgres tests)

on:
  workflow_dispatch:
    inputs:
      test_path:
        description: 'Test path or pattern (blank = all tests)'
        required: false
        default: ''
      pytest_args:
        description: 'Pytest arguments (-k filter, -m marker, -v, etc)'
        required: false
        default: '-v --maxfail=3'

jobs:
  quick-test:
    name: Quick Test Run
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - uses: actions/checkout@v4

      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      - name: Configure Docker for GCP Artifact Registry
        run: |
          gcloud auth configure-docker us-central1-docker.pkg.dev --quiet

      - name: Pull base image
        run: docker pull us-central1-docker.pkg.dev/mizzou-news-crawler/mizzou-crawler/ci-base:latest

      - name: Run specified tests
        env:
          TEST_DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test_db
          GOOGLE_APPLICATION_CREDENTIALS: /tmp/gcp-key.json
        run: |
          # Save GCP credentials to file for container
          echo '${{ secrets.GCP_SA_KEY }}' > /tmp/gcp-key.json
          
          # Determine test path (use input or default to tests/)
          TEST_PATH="${{ github.event.inputs.test_path }}"
          if [ -z "$TEST_PATH" ]; then
            TEST_PATH="tests/"
          fi
          
          echo "Running tests: $TEST_PATH"
          echo "With args: ${{ github.event.inputs.pytest_args }}"
          
          docker run --rm \
            --network host \
            -v ${{ github.workspace }}:/workspace \
            -v /tmp/gcp-key.json:/tmp/gcp-key.json:ro \
            -w /workspace \
            -e TEST_DATABASE_URL="${TEST_DATABASE_URL}" \
            -e GOOGLE_APPLICATION_CREDENTIALS=/tmp/gcp-key.json \
            us-central1-docker.pkg.dev/mizzou-news-crawler/mizzou-crawler/ci-base:latest \
            /bin/bash -c "
              python -m pytest ${TEST_PATH} \
                ${{ github.event.inputs.pytest_args }} \
                --tb=short \
                --no-cov
            "

      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: quick-test-results
          path: |
            .coverage
            htmlcov/
          retention-days: 5
