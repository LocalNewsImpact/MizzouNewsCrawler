[project]
name = "mizzou-news-crawler-scripts"
version = "1.3.1"
description = "Scripts and tools for the Mizzou News Crawler project"
readme = "README.md"
requires-python = ">=3.11"
license = { text = "AGPL-3.0-or-later" }
authors = [ { name = "Mizzou News Crawler contributors", email = "maintainers@localnewsimpact.org" } ]
keywords = ["news", "crawler", "nlp", "data-extraction"]

[project.urls]
"Homepage" = "https://github.com/your-org/MizzouNewsCrawler-Scripts"
"Repository" = "https://github.com/your-org/MizzouNewsCrawler-Scripts"

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py"]
python_functions = ["test_*"]
python_classes = ["Test*"]
addopts = [
    "-v",
    "--tb=short"
]

[tool.black]
line-length = 88
target-version = ['py310', 'py311']
include = '\.pyi?$'
extend-exclude = '''
/(
    \.git
  | \.venv
  | venv
  | __pycache__
  | build
  | dist
)/
'''

[tool.isort]
profile = "black"
line_length = 88
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true
skip_gitignore = true

[tool.ruff]
line-length = 88
target-version = "py311"  # Updated for Python 3.11

[tool.ruff.lint]
select = [
    "E",   # pycodestyle errors
    "W",   # pycodestyle warnings
    "F",   # pyflakes
    "I",   # isort
    "B",   # flake8-bugbear
    "C4",  # flake8-comprehensions
    "UP",  # pyupgrade
]
ignore = [
    "E501",  # line too long (handled by black)
    "B008",  # do not perform function calls in argument defaults
    "B904",  # raise-without-from (stylistic, fix in backend files later)
    "B007",  # unused-loop-control-variable (common pattern)
    "B011",  # assert-false (used in tests/demos)
    "B023",  # function-uses-loop-variable (requires refactoring)
    "C401",  # unnecessary-generator-set (stylistic, not critical)
    "C408",  # unnecessary-collection-call (stylistic)
    "C416",  # unnecessary-comprehension (stylistic)
    "C901",  # too complex
    "E722",  # bare-except (requires specific exception handling, fix incrementally)
    "I001",  # unsorted-imports (handled by isort)
    "UP017", # datetime-timezone-utc (Python 3.11 style, can fix later)
    "UP028", # datetime-utc-alias (Python 3.11 style)
    "UP031", # printf-string-formatting (stylistic, can modernize later)
    "UP035", # deprecated-import (can fix later)
    "UP045", # deprecated-import (can fix later)
    "W191",  # indentation contains tabs
    "W291",  # trailing-whitespace (auto-fixable, not critical)
    "W293",  # blank-line-with-whitespace (auto-fixable, not critical)
]

[tool.ruff.lint.per-file-ignores]
"__init__.py" = ["F401", "E402"]  # Allow unused imports and non-top imports in __init__.py
"tests/**/*.py" = [
    "E402",  # Allow imports not at top in tests (for sys.path manipulation)
    "F401",  # Allow unused imports in test files (test fixtures, examples)
]
"alembic/versions/*.py" = [
    "UP007",  # Alembic auto-generates old-style Union types
    "E402",   # Alembic migrations have imports after revision metadata
]
"scripts/*.py" = [
    "E402",   # Scripts often manipulate sys.path before imports
    "F541",   # Allow f-strings without placeholders (logging templates)
]
"backend/app/main.py" = [
    "F401",   # API main may import for side effects (routes, lifecycle)
    "E402",   # May have conditional imports after app creation
]
"backend/app/lifecycle.py" = [
    "B009",   # getattr with constants is intentional for dynamic config
]
"src/crawler/discovery.py" = [
    "E402",   # Conditional imports after warnings config
]
"scripts/manual_tests/*.py" = [
    "F401",   # Test scripts may import for availability checking
    "E722",   # Bare except acceptable in manual test scripts
]

[tool.mypy]
python_version = "3.10"
warn_return_any = false
warn_unused_configs = true
disallow_untyped_defs = false
ignore_missing_imports = true
show_error_codes = true
no_implicit_optional = false  # Allow Optional without explicit annotation
warn_redundant_casts = true
warn_unused_ignores = false
explicit_package_bases = true
exclude = ["src/pipeline/crawler.py"]

# Disable low-priority error codes for CI (see GitHub issue for future improvements)
disable_error_code = [
    "import-untyped",       # Missing library type stubs (not our code)
    "var-annotated",        # Empty dict/list type annotations
    "annotation-unchecked", # Untyped function bodies (low priority)
    "union-attr",           # Attribute access on unions (requires extensive None checks)
]

[[tool.mypy.overrides]]
module = "tests.*"
ignore_errors = true

[tool.bandit]
exclude_dirs = ["tests", "venv", ".venv", "build", "dist"]
skips = ["B101", "B601"]  # Skip assert_used and shell injection in subprocess (review these)