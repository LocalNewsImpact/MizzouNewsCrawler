# Multi-stage Dockerfile for Background Processor
# Handles extraction, cleaning, entity extraction, classification
# Optimized using shared base image

# Use ARG to allow override of base image location
ARG BASE_IMAGE=mizzou-base:latest

# Stage 1: Install Processor-specific dependencies
FROM ${BASE_IMAGE} AS deps

WORKDIR /app

# Copy only processor-specific requirements (ML packages like torch, transformers)
COPY requirements-processor.txt ./

# Install processor-specific Python packages
RUN pip install --no-cache-dir -r requirements-processor.txt

# Stage 2: Prepare for ML models (will be downloaded from GCS in production)
FROM deps as models

# Create directory for models
RUN mkdir -p /app/models

# Note: In production, models will be downloaded from GCS via init container
# This stage prepares the directory structure for local development
# Spacy model (en_core_web_sm) is already in base image

# Stage 3: Final runtime image
FROM ${BASE_IMAGE} AS runtime

WORKDIR /app

# Copy processor-specific packages from deps stage
# Base packages and spacy model are already in the base image
COPY --from=deps /usr/local/lib/python3.11/site-packages /usr/local/lib/python3.11/site-packages
COPY --from=deps /usr/local/bin /usr/local/bin
COPY --from=deps /root/.cache /root/.cache

# Copy models directory structure (if available)
COPY --from=models /app/models /app/models

# appuser already created in base image, just set ownership
RUN chown -R appuser:appuser /app

# Copy application code
COPY --chown=appuser:appuser src/ ./src/
COPY --chown=appuser:appuser orchestration/ ./orchestration/

# Create data and lookups directories
RUN mkdir -p /app/data /app/lookups && chown -R appuser:appuser /app/data /app/lookups

# Switch to non-root user
USER appuser

# Set environment variables
ENV PYTHONUNBUFFERED=1 \
    PYTHONDONTWRITEBYTECODE=1 \
    MODEL_PATH=/app/models

# Default command (can be overridden in Kubernetes)
CMD ["python", "-m", "src.cli.main", "extract", "--limit", "10"]
