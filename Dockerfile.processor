# Multi-stage Dockerfile for Background Processor
# Handles extraction, cleaning, entity extraction, classification
# Extends ML base image which contains heavy dependencies (torch, transformers)

# Use ARG to allow override of ML base image location
ARG ML_BASE_IMAGE=us-central1-docker.pkg.dev/mizzou-news-crawler/mizzou-crawler/ml-base:latest

# Stage 1: Final runtime image (extends ML base)
FROM ${ML_BASE_IMAGE} AS runtime

WORKDIR /app

# Install system dependencies for headless Chrome/Chromedriver
USER root
RUN apt-get clean && \
    rm -rf /var/lib/apt/lists/* /var/cache/apt/archives/* && \
    apt-get update -o Acquire::Check-Valid-Until=false && \
    (apt-get install -y --no-install-recommends --allow-unauthenticated \
        chromium chromium-driver fonts-liberation libnss3 libxss1 xdg-utils || \
     apt-get install -y --no-install-recommends --fix-missing \
        chromium chromium-driver fonts-liberation libnss3 libxss1 xdg-utils) && \
    rm -rf /var/lib/apt/lists/*

# Install processor-specific requirements (if any)
# Most heavy ML dependencies are already in ml-base
COPY requirements-processor.txt ./
RUN pip install --no-cache-dir -r requirements-processor.txt

# appuser already created in base image, just set ownership
RUN chown -R appuser:appuser /app

# Copy application code
COPY --chown=appuser:appuser src/ ./src/
COPY --chown=appuser:appuser orchestration/ ./orchestration/
COPY --chown=appuser:appuser scripts/ ./scripts/

# Create data and lookups directories
RUN mkdir -p /app/data /app/lookups /app/models && chown -R appuser:appuser /app/data /app/lookups /app/models

# Copy ML model
COPY --chown=appuser:appuser models/productionmodel.pt /app/models/

# Switch to non-root user
USER appuser

# Set environment variables
ENV PYTHONUNBUFFERED=1 \
    PYTHONDONTWRITEBYTECODE=1 \
    MODEL_PATH=/app/models \
    CHROME_BIN=/usr/bin/chromium \
    GOOGLE_CHROME_BIN=/usr/bin/chromium \
    CHROMEDRIVER_PATH=/app/bin/chromedriver

# Provide a writable copy of chromedriver for undetected-chromedriver patching
# (uc patches the driver in-place; /usr/bin is not writable for appuser)
USER root
RUN mkdir -p /app/bin \
    && (if [ -f /usr/bin/chromedriver ]; then cp /usr/bin/chromedriver /app/bin/chromedriver; \
        elif [ -f /usr/lib/chromium/chromedriver ]; then cp /usr/lib/chromium/chromedriver /app/bin/chromedriver; \
        else echo "chromedriver not found in standard locations" && exit 1; fi) \
    && chown -R appuser:appuser /app/bin \
    && chmod u+w /app/bin/chromedriver

# Switch back to non-root user
USER appuser

# Default command (can be overridden in Kubernetes)
CMD ["python", "-m", "src.cli.main", "extract", "--limit", "10"]
