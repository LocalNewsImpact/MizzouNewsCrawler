substitutions:
  _ML_BASE_IMAGE: us-central1-docker.pkg.dev/${PROJECT_ID}/mizzou-crawler/ml-base:latest
  _REGISTRY: us-central1-docker.pkg.dev/${PROJECT_ID}/mizzou-crawler
  _RELEASE_VERSION: '1.3.1'

steps:
  # Warm build cache from the last pushed image (non-fatal if missing)
  - name: 'gcr.io/cloud-builders/docker'
    id: 'warm-cache'
    entrypoint: 'bash'
    args:
      - '-lc'
      - |
        docker pull ${_REGISTRY}/processor:latest || true
  - name: 'gcr.io/cloud-builders/docker'
    id: 'build-processor'
    env:
      - 'DOCKER_BUILDKIT=1'
    args:
      - 'build'
      - '--build-arg'
      - 'ML_BASE_IMAGE=${_ML_BASE_IMAGE}'
      - '--build-arg'
      - 'BUILDKIT_INLINE_CACHE=1'
      - '--cache-from'
      - '${_REGISTRY}/processor:latest'
      - '-f'
      - 'Dockerfile.processor'
      - '-t'
      - '${_REGISTRY}/processor:${SHORT_SHA}'
      - '-t'
      - '${_REGISTRY}/processor:latest'
      - '-t'
      - '${_REGISTRY}/processor:v${_RELEASE_VERSION}'
      - '.'

  - name: 'gcr.io/cloud-builders/docker'
    id: 'push-processor'
    args:
      - 'push'
      - '--all-tags'
      - '${_REGISTRY}/processor'
    waitFor:
      - 'build-processor'

  - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'
    id: 'resolve-current-tags'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        set -euo pipefail
        DEFAULT_API="${_REGISTRY}/api:latest"
        DEFAULT_CRAWLER="${_REGISTRY}/crawler:latest"

        LAST_RELEASE=$$(gcloud deploy releases list \
          --delivery-pipeline=mizzou-news-crawler \
          --region=us-central1 \
          --sort-by="~createTime" \
          --limit=1 \
          --format="value(name)")

        if [ -n "$${LAST_RELEASE}" ]; then
          gcloud deploy releases describe "$${LAST_RELEASE}" \
            --delivery-pipeline=mizzou-news-crawler \
            --region=us-central1 \
            --format=json > /workspace/last_release.json

          python3 -c "import json, sys; from pathlib import Path; registry, default_api, default_crawler = sys.argv[1:]; data=json.load(open('/workspace/last_release.json')); artifacts={item.get('image'): item.get('tag') for item in data.get('buildArtifacts', [])}; api=artifacts.get('api', default_api); crawler=artifacts.get('crawler', default_crawler); Path('/workspace/current-tags.env').write_text(f'API_IMAGE={api}\nCRAWLER_IMAGE={crawler}\n')" "${_REGISTRY}" "$${DEFAULT_API}" "$${DEFAULT_CRAWLER}"
        else
          printf 'API_IMAGE=%s\nCRAWLER_IMAGE=%s\n' "$${DEFAULT_API}" "$${DEFAULT_CRAWLER}" > /workspace/current-tags.env
        fi

        echo "Resolved tags:" && cat /workspace/current-tags.env
    waitFor: ['push-processor']

  - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'
    id: 'create-release'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        set -euo pipefail
        source /workspace/current-tags.env

        # Allow an optional override tag for the release name to avoid duplicates on re-runs
        RELEASE_NAME="processor-${_IMAGE_TAG:-${SHORT_SHA}}"
        PROCESSOR_IMAGE="${_REGISTRY}/processor:${SHORT_SHA}"

        echo "Preparing Cloud Deploy release: $${RELEASE_NAME}"
        echo "  Processor: $${PROCESSOR_IMAGE}"
        echo "  API: $${API_IMAGE}"
        echo "  Crawler: $${CRAWLER_IMAGE}"

        # If a release with this name already exists, treat as idempotent and exit successfully
        if gcloud deploy releases describe "$${RELEASE_NAME}" \
              --delivery-pipeline=mizzou-news-crawler \
              --region=us-central1 >/dev/null 2>&1; then
          echo "Release $${RELEASE_NAME} already exists; skipping create (idempotent)."
          exit 0
        fi

        gcloud deploy releases create "$${RELEASE_NAME}" \
          --delivery-pipeline=mizzou-news-crawler \
          --region=us-central1 \
          --annotations=commitId=${REVISION_ID},service=processor \
          --skaffold-file=skaffold.yaml \
          --images=processor=$${PROCESSOR_IMAGE},api=$${API_IMAGE},crawler=$${CRAWLER_IMAGE}

        echo "âœ… Created Cloud Deploy release $${RELEASE_NAME} for Processor"
    waitFor: ['resolve-current-tags']

  # Force pod update by setting image directly
  # This is the fix - Cloud Deploy doesn't update hardcoded tags in YAML
  # kubectl set image modifies deployment spec -> triggers NEW ReplicaSet -> rolling update
  # No duplicate pods because new RS has different hash in pod names
  - name: 'gcr.io/cloud-builders/gcloud'
    id: 'get-gke-credentials'
    args:
      - 'container'
      - 'clusters'
      - 'get-credentials'
      - 'mizzou-cluster'
      - '--zone=us-central1-a'
    waitFor: ['create-release']

  - name: 'gcr.io/cloud-builders/kubectl'
    id: 'force-processor-update'
    env:
      - 'CLOUDSDK_COMPUTE_ZONE=us-central1-a'
      - 'CLOUDSDK_CONTAINER_CLUSTER=mizzou-cluster'
    args:
      - 'set'
      - 'image'
      - 'deployment/mizzou-processor'
      - 'processor=${_REGISTRY}/processor:${SHORT_SHA}'
      - '--namespace=production'
    waitFor: ['get-gke-credentials']

  # Force a rollout restart to ensure new image is pulled
  # This handles case where same tag has new image digest
  - name: 'gcr.io/cloud-builders/kubectl'
    id: 'restart-processor'
    env:
      - 'CLOUDSDK_COMPUTE_ZONE=us-central1-a'
      - 'CLOUDSDK_CONTAINER_CLUSTER=mizzou-cluster'
    args:
      - 'rollout'
      - 'restart'
      - 'deployment/mizzou-processor'
      - '--namespace=production'
    waitFor: ['force-processor-update']

images:
  - '${_REGISTRY}/processor:${SHORT_SHA}'
  - '${_REGISTRY}/processor:v${_RELEASE_VERSION}'
timeout: 1800s
options:
  machineType: 'N1_HIGHCPU_8'
  diskSizeGb: 100
  logging: CLOUD_LOGGING_ONLY
  substitutionOption: 'ALLOW_LOOSE'
